diff -up ./src/winscard_clnt.c.unlock_mutex ./src/winscard_clnt.c
--- ./src/winscard_clnt.c.unlock_mutex	2015-02-25 15:03:36.277405207 -0800
+++ ./src/winscard_clnt.c	2015-02-25 15:07:09.678722662 -0800
@@ -927,11 +927,16 @@ LONG SCardReconnect(SCARDHANDLE hCard, D
 
 	/* check the handle is still valid */
 	rv = SCardGetIndicesFromHandle(hCard, &dwContextIndex, &dwChannelIndex);
-	if (rv == -1)
-		/* the handle is now invalid
+	if (rv == -1) {
+		/* the hCard handle is now invalid
 		 * -> another thread may have called SCardReleaseContext
-		 * -> so the mMutex has been unlocked */
+		 *    so the mMutex has been unlocked (and is now invalid)
+		 * -> another thread may have called SCardDisconnect
+		 *    so the mMutex is STILL locked.
+		 *  since we don't know just unlock the mutext*/
+		(void)SYS_MutexUnLock(psContextMap[dwContextIndex].mMutex);
 		return SCARD_E_INVALID_HANDLE;
+	}
 
 	for (i = 0; i < PCSCLITE_MAX_READERS_CONTEXTS; i++)
 	{
@@ -1045,11 +1050,16 @@ LONG SCardDisconnect(SCARDHANDLE hCard, 
 
 	/* check the handle is still valid */
 	rv = SCardGetIndicesFromHandle(hCard, &dwContextIndex, &dwChannelIndex);
-	if (rv == -1)
-		/* the handle is now invalid
+	if (rv == -1) {
+		/* the hCard handle is now invalid
 		 * -> another thread may have called SCardReleaseContext
-		 * -> so the mMutex has been unlocked */
+		 *    so the mMutex has been unlocked (and is now invalid)
+		 * -> another thread may have called SCardDisconnect
+		 *    so the mMutex is STILL locked.
+		 *  since we don't know just unlock the mutext*/
+		(void)SYS_MutexUnLock(psContextMap[dwContextIndex].mMutex);
 		return SCARD_E_INVALID_HANDLE;
+	}
 
 	scDisconnectStruct.hCard = hCard;
 	scDisconnectStruct.dwDisposition = dwDisposition;
@@ -1150,11 +1160,16 @@ LONG SCardBeginTransaction(SCARDHANDLE h
 
 	/* check the handle is still valid */
 	rv = SCardGetIndicesFromHandle(hCard, &dwContextIndex, &dwChannelIndex);
-	if (rv == -1)
-		/* the handle is now invalid
+	if (rv == -1) {
+		/* the hCard handle is now invalid
 		 * -> another thread may have called SCardReleaseContext
-		 * -> so the mMutex has been unlocked */
+		 *    so the mMutex has been unlocked (and is now invalid)
+		 * -> another thread may have called SCardDisconnect
+		 *    so the mMutex is STILL locked.
+		 *  since we don't know just unlock the mutext*/
+		(void)SYS_MutexUnLock(psContextMap[dwContextIndex].mMutex);
 		return SCARD_E_INVALID_HANDLE;
+	}
 
 	for (i = 0; i < PCSCLITE_MAX_READERS_CONTEXTS; i++)
 	{
@@ -1287,11 +1302,16 @@ LONG SCardEndTransaction(SCARDHANDLE hCa
 
 	/* check the handle is still valid */
 	rv = SCardGetIndicesFromHandle(hCard, &dwContextIndex, &dwChannelIndex);
-	if (rv == -1)
-		/* the handle is now invalid
+	if (rv == -1) {
+		/* the hCard handle is now invalid
 		 * -> another thread may have called SCardReleaseContext
-		 * -> so the mMutex has been unlocked */
+		 *    so the mMutex has been unlocked (and is now invalid)
+		 * -> another thread may have called SCardDisconnect
+		 *    so the mMutex is STILL locked.
+		 *  since we don't know just unlock the mutext*/
+		(void)SYS_MutexUnLock(psContextMap[dwContextIndex].mMutex);
 		return SCARD_E_INVALID_HANDLE;
+	}
 
 	for (i = 0; i < PCSCLITE_MAX_READERS_CONTEXTS; i++)
 	{
@@ -1381,11 +1401,16 @@ LONG SCardCancelTransaction(SCARDHANDLE 
 
 	/* check the handle is still valid */
 	rv = SCardGetIndicesFromHandle(hCard, &dwContextIndex, &dwChannelIndex);
-	if (rv == -1)
-		/* the handle is now invalid
+	if (rv == -1) {
+		/* the hCard handle is now invalid
 		 * -> another thread may have called SCardReleaseContext
-		 * -> so the mMutex has been unlocked */
+		 *    so the mMutex has been unlocked (and is now invalid)
+		 * -> another thread may have called SCardDisconnect
+		 *    so the mMutex is STILL locked.
+		 *  since we don't know just unlock the mutext*/
+		(void)SYS_MutexUnLock(psContextMap[dwContextIndex].mMutex);
 		return SCARD_E_INVALID_HANDLE;
+	}
 
 	for (i = 0; i < PCSCLITE_MAX_READERS_CONTEXTS; i++)
 	{
@@ -1576,11 +1601,16 @@ LONG SCardStatus(SCARDHANDLE hCard, LPST
 
 	/* check the handle is still valid */
 	rv = SCardGetIndicesFromHandle(hCard, &dwContextIndex, &dwChannelIndex);
-	if (rv == -1)
-		/* the handle is now invalid
+	if (rv == -1) {
+		/* the hCard handle is now invalid
 		 * -> another thread may have called SCardReleaseContext
-		 * -> so the mMutex has been unlocked */
+		 *    so the mMutex has been unlocked (and is now invalid)
+		 * -> another thread may have called SCardDisconnect
+		 *    so the mMutex is STILL locked.
+		 *  since we don't know just unlock the mutext*/
+		(void)SYS_MutexUnLock(psContextMap[dwContextIndex].mMutex);
 		return SCARD_E_INVALID_HANDLE;
+	}
 
 	r = psContextMap[dwContextIndex].psChannelMap[dwChannelIndex].readerName;
 	for (i = 0; i < PCSCLITE_MAX_READERS_CONTEXTS; i++)
@@ -2374,11 +2404,16 @@ LONG SCardControl(SCARDHANDLE hCard, DWO
 
 	/* check the handle is still valid */
 	rv = SCardGetIndicesFromHandle(hCard, &dwContextIndex, &dwChannelIndex);
-	if (rv == -1)
-		/* the handle is now invalid
+	if (rv == -1) {
+		/* the hCard handle is now invalid
 		 * -> another thread may have called SCardReleaseContext
-		 * -> so the mMutex has been unlocked */
+		 *    so the mMutex has been unlocked (and is now invalid)
+		 * -> another thread may have called SCardDisconnect
+		 *    so the mMutex is STILL locked.
+		 *  since we don't know just unlock the mutext*/
+		(void)SYS_MutexUnLock(psContextMap[dwContextIndex].mMutex);
 		return SCARD_E_INVALID_HANDLE;
+	}
 
 	for (i = 0; i < PCSCLITE_MAX_READERS_CONTEXTS; i++)
 	{
@@ -2752,11 +2787,16 @@ static LONG SCardGetSetAttrib(SCARDHANDL
 
 	/* check the handle is still valid */
 	rv = SCardGetIndicesFromHandle(hCard, &dwContextIndex, &dwChannelIndex);
-	if (rv == -1)
-		/* the handle is now invalid
+	if (rv == -1) {
+		/* the hCard handle is now invalid
 		 * -> another thread may have called SCardReleaseContext
-		 * -> so the mMutex has been unlocked */
+		 *    so the mMutex has been unlocked (and is now invalid)
+		 * -> another thread may have called SCardDisconnect
+		 *    so the mMutex is STILL locked.
+		 *  since we don't know just unlock the mutext*/
+		(void)SYS_MutexUnLock(psContextMap[dwContextIndex].mMutex);
 		return SCARD_E_INVALID_HANDLE;
+	}
 
 	for (i = 0; i < PCSCLITE_MAX_READERS_CONTEXTS; i++)
 	{
@@ -2926,11 +2966,16 @@ LONG SCardTransmit(SCARDHANDLE hCard, LP
 
 	/* check the handle is still valid */
 	rv = SCardGetIndicesFromHandle(hCard, &dwContextIndex, &dwChannelIndex);
-	if (rv == -1)
-		/* the handle is now invalid
+	if (rv == -1) {
+		/* the hCard handle is now invalid
 		 * -> another thread may have called SCardReleaseContext
-		 * -> so the mMutex has been unlocked */
+		 *    so the mMutex has been unlocked (and is now invalid)
+		 * -> another thread may have called SCardDisconnect
+		 *    so the mMutex is STILL locked.
+		 *  since we don't know just unlock the mutext*/
+		(void)SYS_MutexUnLock(psContextMap[dwContextIndex].mMutex);
 		return SCARD_E_INVALID_HANDLE;
+	}
 
 	for (i = 0; i < PCSCLITE_MAX_READERS_CONTEXTS; i++)
 	{
